import { douglasPeucker } from '../../src/algorithm/douglas-peucker';

const input = [77, 264.1, 81.1, 274.5, 85.3, 274.5, 89.4, 259.9, 93.5, 278.7, 97.7, 282.9, 101.8, 282.9, 105.9, 282.9, 110.1, 282.9, 114.2, 272.5, 118.3, 270.4, 122.5, 270.4, 126.6, 272.5, 130.7, 239.0, 134.9, 249.5, 139.0, 259.9, 143.1, 257.8, 147.3, 264.1, 151.4, 228.6, 155.5, 228.6, 159.7, 259.9, 163.8, 251.6, 167.9, 255.7, 172.0, 264.1, 176.2, 251.6, 180.3, 253.7, 184.4, 259.9, 188.6, 251.6, 192.7, 255.7, 196.8, 255.7, 201.0, 255.7, 205.1, 236.9, 209.2, 251.6, 213.4, 249.5, 217.5, 262.0, 221.6, 253.7, 225.8, 251.6, 229.9, 239.0, 234.0, 251.6, 238.2, 259.9, 242.3, 236.9, 246.4, 247.4, 250.6, 249.5, 254.7, 251.6, 258.8, 241.1, 263.0, 220.2, 267.1, 222.3, 271.2, 117.8, 275.4, 220.2, 279.5, 243.2, 283.6, 226.5, 287.8, 234.8, 291.9, 145.0, 296.0, 213.9, 300.2, 230.7, 304.3, 239.0, 308.4, 228.6, 312.6, 249.5, 316.7, 228.6, 320.8, 138.7, 325.0, 207.7, 329.1, 228.6, 333.2, 211.8, 337.4, 195.1, 341.5, 216.0, 345.6, 178.4, 349.8, 201.4, 353.9, 218.1, 358.0, 230.7, 362.1, 243.2, 366.3, 220.2, 370.4, 222.3, 374.5, 213.9, 378.7, 168.0, 382.8, 243.2, 386.9, 220.2, 391.1, 186.8, 395.2, 201.4, 399.3, 230.7, 403.5, 213.9, 407.6, 199.3, 411.7, 220.2, 415.9, 236.9, 420.0, 218.1, 424.1, 243.2, 428.3, 190.9, 432.4, 193.0, 436.5, 182.6, 440.7, 207.7, 444.8, 239.0, 448.9, 228.6, 453.1, 247.4, 457.2, 257.8, 461.3, 251.6, 465.5, 253.7, 469.6, 247.4, 473.7, 243.2, 477.9, 236.9, 482.0, 241.1, 486.1, 259.9, 490.3, 259.9, 494.4, 239.0, 498.5, 243.2, 502.7, 245.3, 506.8, 239.0, 510.9, 211.8, 515.1, 201.4, 519.2, 272.5, 523.3, 251.6, 527.5, 264.1, 531.6, 255.7, 535.7, 259.9, 539.9, 276.6, 544.0, 251.6, 548.1, 276.6, 552.2, 266.2, 556.4, 272.5, 560.5, 278.7, 564.6, 270.4, 568.8, 274.5, 572.9, 262.0, 577.0, 282.9, 581.2, 282.9, 585.3, 276.6, 589.4, 272.5, 593.6, 278.7, 597.7, 278.7, 601.8, 278.7, 606.0, 282.9, 610.1, 278.7, 614.2, 282.9, 618.4, 268.3, 622.5, 282.9, 626.6, 282.9, 630.8, 270.4, 634.9, 282.9, 639.0, 282.9, 643.2, 278.7, 647.3, 257.8, 651.4, 274.5, 655.6, 264.1, 659.7, 278.7, 663.8, 278.7, 668.0, 282.9, 672.1, 266.2, 676.2, 282.9, 680.4, 270.4, 684.5, 272.5, 688.6, 259.9, 692.8, 282.9, 696.9, 274.5, 701.0, 249.5, 705.2, 266.2, 709.3, 282.9, 713.4, 157.5, 717.6, 270.4, 721.7, 278.7, 725.8, 251.6, 730.0, 236.9, 734.1, 272.5, 738.2, 272.5, 742.3, 264.1, 746.5, 266.2, 750.6, 274.5, 754.7, 255.7, 758.9, 274.5, 763.0, 272.5, 767.1, 224.4, 771.3, 272.5, 775.4, 268.3, 779.5, 239.0, 783.7, 251.6, 787.8, 259.9, 791.9, 259.9, 796.1, 264.1, 800.2, 251.6, 804.3, 245.3, 808.5, 272.5, 812.6, 259.9, 816.7, 239.0, 820.9, 247.4, 825.0, 253.7];

describe('道格拉斯·普克算法', () => {
	test('执行优化', () => {
		expect(douglasPeucker(10, [0,0,0,0,10,10,10,10,20,20,0,0])).toEqual([0,0,20,20,0,0]);
		expect(douglasPeucker(100, input)).toEqual([77, 264.1, 81.1, 274.5, 271.2, 117.8, 279.5, 243.2, 320.8, 138.7, 825, 253.7]);
		expect(douglasPeucker(30, input)).toEqual([77, 264.1, 81.1, 274.5, 151.4, 228.6, 172, 264.1, 254.7, 251.6, 271.2, 117.8, 279.5, 243.2, 291.9, 145, 312.6, 249.5, 320.8, 138.7, 362.1, 243.2, 378.7, 168, 382.8, 243.2, 391.1, 186.8, 424.1, 243.2, 436.5, 182.6, 457.2, 257.8, 515.1, 201.4, 519.2, 272.5, 692.8, 282.9, 701, 249.5, 709.3, 282.9, 713.4, 157.5, 721.7, 278.7, 767.1, 224.4, 771.3, 272.5, 825, 253.7]);
		expect(douglasPeucker(0, input)).toEqual([77, 264.1, 81.1, 274.5, 85.3, 274.5, 89.4, 259.9, 93.5, 278.7, 97.7, 282.9, 110.1, 282.9, 114.2, 272.5, 118.3, 270.4, 122.5, 270.4, 126.6, 272.5, 130.7, 239, 134.9, 249.5, 139, 259.9, 143.1, 257.8, 147.3, 264.1, 151.4, 228.6, 155.5, 228.6, 159.7, 259.9, 163.8, 251.6, 167.9, 255.7, 172, 264.1, 176.2, 251.6, 180.3, 253.7, 184.4, 259.9, 188.6, 251.6, 192.7, 255.7, 201, 255.7, 205.1, 236.9, 209.2, 251.6, 213.4, 249.5, 217.5, 262, 221.6, 253.7, 225.8, 251.6, 229.9, 239, 234, 251.6, 238.2, 259.9, 242.3, 236.9, 246.4, 247.4, 250.6, 249.5, 254.7, 251.6, 258.8, 241.1, 263, 220.2, 267.1, 222.3, 271.2, 117.8, 275.4, 220.2, 279.5, 243.2, 283.6, 226.5, 287.8, 234.8, 291.9, 145, 296, 213.9, 300.2, 230.7, 304.3, 239, 308.4, 228.6, 312.6, 249.5, 316.7, 228.6, 320.8, 138.7, 325, 207.7, 329.1, 228.6, 333.2, 211.8, 337.4, 195.1, 341.5, 216, 345.6, 178.4, 349.8, 201.4, 353.9, 218.1, 358, 230.7, 362.1, 243.2, 366.3, 220.2, 370.4, 222.3, 374.5, 213.9, 378.7, 168, 382.8, 243.2, 386.9, 220.2, 391.1, 186.8, 395.2, 201.4, 399.3, 230.7, 403.5, 213.9, 407.6, 199.3, 411.7, 220.2, 415.9, 236.9, 420, 218.1, 424.1, 243.2, 428.3, 190.9, 432.4, 193, 436.5, 182.6, 440.7, 207.7, 444.8, 239, 448.9, 228.6, 453.1, 247.4, 457.2, 257.8, 461.3, 251.6, 465.5, 253.7, 469.6, 247.4, 473.7, 243.2, 477.9, 236.9, 482, 241.1, 486.1, 259.9, 490.3, 259.9, 494.4, 239, 498.5, 243.2, 502.7, 245.3, 506.8, 239, 510.9, 211.8, 515.1, 201.4, 519.2, 272.5, 523.3, 251.6, 527.5, 264.1, 531.6, 255.7, 535.7, 259.9, 539.9, 276.6, 544, 251.6, 548.1, 276.6, 552.2, 266.2, 556.4, 272.5, 560.5, 278.7, 564.6, 270.4, 568.8, 274.5, 572.9, 262, 577, 282.9, 581.2, 282.9, 585.3, 276.6, 589.4, 272.5, 593.6, 278.7, 601.8, 278.7, 606, 282.9, 610.1, 278.7, 614.2, 282.9, 618.4, 268.3, 622.5, 282.9, 626.6, 282.9, 630.8, 270.4, 634.9, 282.9, 639, 282.9, 643.2, 278.7, 647.3, 257.8, 651.4, 274.5, 655.6, 264.1, 659.7, 278.7, 663.8, 278.7, 668, 282.9, 672.1, 266.2, 676.2, 282.9, 680.4, 270.4, 684.5, 272.5, 688.6, 259.9, 692.8, 282.9, 696.9, 274.5, 701, 249.5, 705.2, 266.2, 709.3, 282.9, 713.4, 157.5, 717.6, 270.4, 721.7, 278.7, 725.8, 251.6, 730, 236.9, 734.1, 272.5, 738.2, 272.5, 742.3, 264.1, 746.5, 266.2, 750.6, 274.5, 754.7, 255.7, 758.9, 274.5, 763, 272.5, 767.1, 224.4, 771.3, 272.5, 775.4, 268.3, 779.5, 239, 783.7, 251.6, 787.8, 259.9, 791.9, 259.9, 796.1, 264.1, 800.2, 251.6, 804.3, 245.3, 808.5, 272.5, 812.6, 259.9, 816.7, 239, 820.9, 247.4, 825, 253.7]);
	});
});
